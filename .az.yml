trigger:
  branches:
    include:
    - master
    - develop
    - feature*
    - hotfix*
    - bug*
    - release*

variables: 
  buildVersion: $(GitVersion.PreReleaseNumber) 

stages:
- stage: Build
  jobs:

  - job: Build

    pool:
      vmImage: 'windows-2019'

    variables:
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

    steps:

    - checkout: self
      fetchDepth: 0 
      clean: true
      persistCredentials: True
    - task: gitversion/setup@0
      displayName: Install GitVersion
      inputs:
        versionSpec: '5.x'

    - task: gitversion/execute@0
      inputs:
        updateAssemblyInfo: true


    - task: NodeTool@0
      displayName: 'Use Node 12.x'
      inputs:
        versionSpec: 10.x

      # - task: GitVersion@5
    #   inputs:
    #     runtime: 'full'
    #     configFilePath: 'GitVersionConfig.yaml'
    #     updateAssemblyInfo: true
    #     updateAssemblyInfoFilename: 'ConditionalContent/ConditionalContent.csproj'

    - task: NuGetCommand@2
      displayName: "Nuget Restore"
      inputs:
        command: 'restore'
        restoreSolution: '**/*.sln'
        feedsToUse: 'config'
    - task: InlinePowershell@1  
      displayName: "Update version in Orckestra.Tools.ConditionalContent Install.xml"
      inputs:
        Script: |
          $installXml = [xml](get-content ("$(Build.SourcesDirectory)\ConditionalContent.Package\Package\install.xml"))
          $packageInformation = $installXml.SelectSingleNode("//*[local-name()='PackageInformation']")
          $packageInformation.version = '$(GitVersion.MajorMinorPatch)'
          $installXml.Save("$(Build.SourcesDirectory)\ConditionalContent.Package\Package\install.xml");

    - task: VSBuild@1
      displayName: 'Build solution ConditionalContent'
      inputs:
        solution: .\ConditionalContent.sln 
        vsVersion: "16.0"


    - task: PowerShell@1
      displayName: Tag source
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 
      inputs:
        scriptType: inlineScript
        inlineScript: |
              git tag $(GitVersion.SemVer)
              git push origin $(GitVersion.SemVer)

    - task: CopyFiles@2
      displayName: 'Copy Orckestra*.zip to Publish Artifact folder'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: |
          **\Orckestra*.zip

        TargetFolder: '$(build.artifactstagingdirectory)/Packages'
        flattenFolders: true

    # - task: PowerShell@2
    #   inputs:
    #     targetType: 'inline'
    #     script: '"This is a autogenerated release" | Out-File -FilePath $(build.sourcesdirectory)/release.md'
    
    - task: file-creator@6
      inputs:
        filepath: '$(build.sourcesdirectory)/release.md'
        filecontent: 'This is an autogenerated release'
        fileoverwrite: true
        endWithNewLine: true
        verbose: true
    - task: gitreleasemanager/setup@0
      displayName: Install GitReleaseManager
      inputs:
        versionSpec: '0.13.x'


    - task: gitreleasemanager/create@0
      inputs:
        owner: 'Orckestra'
        repository: 'CMS-Packages-ConditionalContent'
        token: '$(GITHUB_TOKEN)'
        name: 'v$(GitVersion.SemVer)'
        inputFilePath: '$(build.sourcesdirectory)/release.md'
        assets: 'ConditionalContent.Package/Release/Orckestra.Tools.ConditionalContent.zip'

    - task: CmdLine@2
      inputs:
        script: 'dotnet-gitreleasemanager create --owner Orckestra  --inputFilePath $(build.sourcesdirectory)/release.md --repository CMS-Packages-ConditionalContent --token $(GITHUB_TOKEN) --targetDirectory $(build.sourcesdirectory) --name v$(GitVersion.SemVer) --assets $(build.sourcesdirectory)\ConditionalContent.Package\Release\Orckestra.Tools.ConditionalContent.zip'

    # - task: gitreleasemanager/create@0
    #   displayName: Create release with GitReleaseManager
    #   inputs:
    #     owner: Orckestra
    #     repository: CMS-Packages-ConditionalContent
    #     token: $(GITHUB_TOKEN)
    #     name: 'v$(GitVersion.SemVer)'
    #     inputFilePath: '$(build.sourcesdirectory)/release.md' 
    #     assets: |
    #       ConditionalContent.Package/Release/Orckestra.Tools.ConditionalContent.zip